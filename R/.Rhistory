devtools::install_github("vpellissier/pargwr")
library(pargwr)
data("bio")
summary(bio)
summary(bio@data)
gwr_sel_par(bio~dtm_sc+AspectSC, data=bio)
?gwr_par
gwr_par(bio~dtm_sc+AspectSC, data=bio, bandwidth=796)
gwr_par(bio~dtm_sc+AspectSC, data=bio, bandwidth=796)->gwr1
names(gwr1)
gwr1$diagnostic.metrics
gwr_par(bio~dtm_sc+AspectSC, data=bio, bandwidth=796, diqgnostic=T->gwr1
gwr_par(bio~dtm_sc+AspectSC, data=bio, bandwidth=796, diqgnostic=T)->gwr1
gwr_par(bio~dtm_sc+AspectSC, data=bio, bandwidth=796, diagnostic=T)->gwr1
gwr1$diagnostic.metrics
spgwr::gwr
?spgwr::gwr
print.gwr
getAnywhere(print.gwr)
printCoefmat
?printCoefmat
summary(gwr1)
gwr1$global.lm
summary(gwr1$global.lm)
gwr1$diagnostic.metrics
?invisible
x<-2
list(2,2)
list(2,invisible(x))
list(2,invisible(x))->a
a
x
a<-function(a,b,c)
{
list(a,b,invisible(c))
}
a(1,2,3)
a<-function(a,b,c)
{
invisible(list(a,b,c))
}
a(1,2,3)
a(1,2,3)->a
a<-function(a,b,c)
{
invisible(list(a,b,c))
}
a(1,2,3)->b
b
a(1,2,3)
deviance(gwr1$glm)
deviance(gwr1$glm.global)
summary(gwr1)
deviance(gwr1$global.lm)
gwr1$diagnostic.metrics
anova(gwr1$global.lm)
gwr1$call
x<-gwr1
if(class(x)!="pargwr")
stop("Object class is not pargwr")
cat("Call:\n", x$call)
cat("Kernel:", x$kernel)
cat("Call:\n", print(x$call))
?cat
cat(x$call)
as.character(print(x$call))
cat(print(x$call))
cat("Kernel:", x$kernel)
cat("Bandwidth: ", x$bandwidth)
cat("Call:\n")
print(x$call)
cat("Call:\n")
print(x$call)
cat("Kernel:", x$kernel)
cat("Bandwidth: ", x$bandwidth)
summary(x$global.lm)
x$call
formula(x$call)
rhs(formula(x$call))
all.vars(formula(x$call))
all.vars(formula(x$call))[-1]
x$global.lm
summary(x$global.lm)
summary(x$global.lm)$coefficients
summary(x$global.lm)$coefficients$Estimate
summary(x$global.lm)$coefficients[,"Estimate"]
c(summary(x$global.lm)$coefficients[,"Estimate"],
summary(x$global.lm)$coefficients[,"Std. Error"])
??aicc
??AIC
?AIC
AIC(x$global.lm)
MuMIn::AICc(x$global.lm)
summry(x$global.lm)
summary(x$global.lm)
summary(x)
MuMIn::AICc(x$global.lm)
MuMIn::AIC(x$global.lm)
AIC(x$global.lm)
AIC(x$global.lm)->a
a+((2*3^2+2*3)/(3025-3-1)
a+((2*3^2+2*3)/(3025-3-1))
a+((2*2^2+2*2)/(3025-2-1))
a+((2*2^2+2*2)/(3021-2-1))
a+((2*2^2+2*2)/(3025-2-1))
a+((2*4^2+2*4)/(3025-4-1))
MuMin::AICc
MuMIn::AICc
logLik(x$global.lm)$df
logLik(x$global.lm)["df"]
ll(x$global.lm)["df"]
logLik(x$global.lm)
attr(logLik(x$global.lm), "df")
attr(logLik(x$global.lm), "df")
summary(x$global.lm)
summary(x$global.lm)$df
attributes(summary(x$global.lm))
3022+3
attributes(logLik(x$global.lm))
df_glm<-attr(logLik(x$global.lm), "df")
n.sample<-attr(logLik(x$global.lm), "nobs")
AIC(x$global.lm)+(2*df^2+2*df)/(n.sample-df-1)
AIC(x$global.lm)+(2*df_glm^2+2*df)/(n.sample-df_glm-1)
AIC(x$global.lm)+(2*df_glm^2+2*df_glm)/(n.sample-df_glm-1)
deviance(x$global.lm)
anova(x$global.lm)
summary(x$global.lm)
attributes(summary(x$global.lm))
summary(x$global.lm)$adj.r.squared
glob_param<-c(summary(x$global.lm)$coefficients[,"Estimate"],
summary(x$global.lm)$coefficients[,"Std. Error"],
df-1, n.sample-df, AIC(x$global.lm),
AIC(x$global.lm)+(2*df_glm^2+2*df_glm)/(n.sample-df_glm-1),
deviance(x$global.lm), summary(x$global.lm)$adj.r.squared)
glob_param<-c(summary(x$global.lm)$coefficients[,"Estimate"],
summary(x$global.lm)$coefficients[,"Std. Error"],
df_glm-1, n.sample-df_glm, AIC(x$global.lm),
AIC(x$global.lm)+(2*df_glm^2+2*df_glm)/(n.sample-df_glm-1),
deviance(x$global.lm), summary(x$global.lm)$adj.r.squared)
glob_param
head(x$sdf)
m<-2
head(as(x$sdf, "data.frame")[, (1 + (1:(m)df_glm-1)), drop = FALSE])
head(as(x$sdf, "data.frame")[, (1 + (1:(df_glm-1))), drop = FALSE])
summary(x)
gwr2<-gwr_par(bio~dtm_sc+AspectSC, data=bio, bandwidth=796)
summary(gwr2)
is.null(gwr2$diagnostic.metrics)
gwr_coeffs<-as(x$sdf, "data.frame")[, (1 + (1:(df_glm-1))), drop = FALSE]
sapply(seq(ncol(gwr_coeffs)), mean)
seq(ncol(gwr_coeffs))
apply(gwr_coeffs, 2, meqn)
apply(gwr_coeffs, 2, mean)
apply(gwr_coeffs, 2, sd)
gwr_param<-c(apply(gwr_coeffs, 2, mean),
apply(gwr_coeffs, 2, sd),
NA, NA, NA, NA, NA, NA)
gwr_param
x$diagnostic.metrics
x$diagnostic.metrics$EDF
gwr_param<-c(apply(gwr_coeffs, 2, mean),
apply(gwr_coeffs, 2, sd),
x$diagnostic.metrics$EDF, n.sample-x$diagnostic.metrics$EDF,
x$diagnostic.metrics$AIC, x$diagnostic.metrics$AICc,
x$diagnostic.metrics$RSS,
1-x$diagnostic.metrics$RSS/x$diagnostic.metrics$TSS)
gwr_param
all.vars(formula(x$call))[-1]
matrix(c(1,2,3,2,4,NA))
matrix(c(1,2,3,2,4,NA), ncol=2
)
aaa<-matrix(c(1,2,3,2,4,NA), ncol=2)
apply(aaa, 2, mean)
apply(aaa, 2, mean, na.omir=T)
apply(aaa, 2, mean, na.omiT=T)
apply(aaa, 2, mean, na.omit=T)
apply(aaa, 2, mean, na.rm=T)
rbind(glob_param, gwr_param)
gwr_param<-c(apply(gwr_coeffs, 2, mean, na.rm=T),
apply(gwr_coeffs, 2, sd, na.rm=T),
x$diagnostic.metrics$EDF, n.sample-x$diagnostic.metrics$EDF,
x$diagnostic.metrics$AIC, x$diagnostic.metrics$AICc,
x$diagnostic.metrics$RSS,
1-x$diagnostic.metrics$RSS/x$diagnostic.metrics$TSS)
1-x$diagnostic.metrics$RSS/x$diagnostic.metrics$TSS
gwr_param
gwr_param<-c(gwr_param, 0.68456)
rbind(glob_param, gwr_param)
colnames(printDF)<-c(coef_names, paste0("sd_", coef_names), "Effective DF",
"Effective number of parameters", "AIC", "AICc",
"RSS", "(Quasi) R2")
coef_names<-c("Intercept", all.vars(formula(x$call))[-1]
df_glm<-attr(logLik(x$global.lm), "df")
n.sample<-attr(logLik(x$global.lm), "nobs")
glob_param<-c(summary(x$global.lm)$coefficients[,"Estimate"],
summary(x$global.lm)$coefficients[,"Std. Error"],
df_glm-1, n.sample-df_glm, AIC(x$global.lm),
AIC(x$global.lm)+(2*df_glm^2+2*df_glm)/(n.sample-df_glm-1),
deviance(x$global.lm), summary(x$global.lm)$adj.r.squared)
gwr_coeffs<-as(x$sdf, "data.frame")[, (1 + (1:(df_glm-1))), drop = FALSE]
if(any(is.na(gwr_coeffs)))
warning("NAs dropped in GWR local coefficients!")
if(is.null(gwr2$diagnostic.metrics))
gwr_param<-c(apply(gwr_coeffs, 2, mean, na.rm=T),
apply(gwr_coeffs, 2, sd, na.rm=T),
NA, NA, NA, NA, NA, NA)
if(!is.null(gwr2$diagnostic.metrics))
gwr_param<-c(apply(gwr_coeffs, 2, mean, na.rm=T),
apply(gwr_coeffs, 2, sd, na.rm=T),
x$diagnostic.metrics$EDF, n.sample-x$diagnostic.metrics$EDF,
x$diagnostic.metrics$AIC, x$diagnostic.metrics$AICc,
x$diagnostic.metrics$RSS,
1-x$diagnostic.metrics$RSS/x$diagnostic.metrics$TSS)
printDF<-rbind(glob_param, gwr_param)
colnames(printDF)<-c(coef_names, paste0("sd_", coef_names), "Effective DF",
"Effective number of parameters", "AIC", "AICc",
"RSS", "(Quasi) R2")
coef_names<-c("Intercept", all.vars(formula(x$call))[-1]
}
as(x$sdf, "data.frame")[, (1 + (1:(df_glm-1))), drop = FALSE]
coef_names<-c("Intercept", all.vars(formula(x$call))[-1])
printDF<-rbind(glob_param, gwr_param)
colnames(printDF)<-c(coef_names, paste0("sd_", coef_names), "Effective DF",
"Effective number of parameters", "AIC", "AICc",
"RSS", "(Quasi) R2")
rownames(printDF)<-c("Global model", "GWR")
printDF
colnames(printDF)<-c(coef_names, paste0("sd_", coef_names),
"Effective number of parameters",
"Effective DF", "AIC", "AICc",
"RSS", "(Quasi) R2")
printCoefmat(printDF)
?printCoefmat
glob_param<-c(summary(x$global.lm)$coefficients[,"Estimate"],
summary(x$global.lm)$coefficients[,"Std. Error"],
as.integer(df_glm-1), as.integer(n.sample-df_glm), AIC(x$global.lm),
AIC(x$global.lm)+(2*df_glm^2+2*df_glm)/(n.sample-df_glm-1),
deviance(x$global.lm), summary(x$global.lm)$adj.r.squared)
printDF<-rbind(glob_param, gwr_param)
colnames(printDF)<-c(coef_names, paste0("sd_", coef_names),
"Effective number of parameters",
"Effective DF", "AIC", "AICc",
"RSS", "(Quasi) R2")
rownames(printDF)<-c("Global model", "GWR")
?printCoefmat
printCoefmat(printDF)
print(printDF)
?print.coefmat
devtools::document("C:/Users/vincent/Documents/pargwr")
devtools::install_github("vpellissier/pargwr")
devtools::install_github("vpellissier/pargwr")
library(pargwr)
gwr2<-gwr_par(bio~dtm_sc+AspectSC, data=bio, bandwidth=796)
gwr2
print(gwr2)
getAnywhere(print.pargwr)
