seq(ncol(gwr_coeffs))
apply(gwr_coeffs, 2, meqn)
apply(gwr_coeffs, 2, mean)
apply(gwr_coeffs, 2, sd)
gwr_param<-c(apply(gwr_coeffs, 2, mean),
apply(gwr_coeffs, 2, sd),
NA, NA, NA, NA, NA, NA)
gwr_param
x$diagnostic.metrics
x$diagnostic.metrics$EDF
gwr_param<-c(apply(gwr_coeffs, 2, mean),
apply(gwr_coeffs, 2, sd),
x$diagnostic.metrics$EDF, n.sample-x$diagnostic.metrics$EDF,
x$diagnostic.metrics$AIC, x$diagnostic.metrics$AICc,
x$diagnostic.metrics$RSS,
1-x$diagnostic.metrics$RSS/x$diagnostic.metrics$TSS)
gwr_param
all.vars(formula(x$call))[-1]
matrix(c(1,2,3,2,4,NA))
matrix(c(1,2,3,2,4,NA), ncol=2
)
aaa<-matrix(c(1,2,3,2,4,NA), ncol=2)
apply(aaa, 2, mean)
apply(aaa, 2, mean, na.omir=T)
apply(aaa, 2, mean, na.omiT=T)
apply(aaa, 2, mean, na.omit=T)
apply(aaa, 2, mean, na.rm=T)
rbind(glob_param, gwr_param)
gwr_param<-c(apply(gwr_coeffs, 2, mean, na.rm=T),
apply(gwr_coeffs, 2, sd, na.rm=T),
x$diagnostic.metrics$EDF, n.sample-x$diagnostic.metrics$EDF,
x$diagnostic.metrics$AIC, x$diagnostic.metrics$AICc,
x$diagnostic.metrics$RSS,
1-x$diagnostic.metrics$RSS/x$diagnostic.metrics$TSS)
1-x$diagnostic.metrics$RSS/x$diagnostic.metrics$TSS
gwr_param
gwr_param<-c(gwr_param, 0.68456)
rbind(glob_param, gwr_param)
colnames(printDF)<-c(coef_names, paste0("sd_", coef_names), "Effective DF",
"Effective number of parameters", "AIC", "AICc",
"RSS", "(Quasi) R2")
coef_names<-c("Intercept", all.vars(formula(x$call))[-1]
df_glm<-attr(logLik(x$global.lm), "df")
n.sample<-attr(logLik(x$global.lm), "nobs")
glob_param<-c(summary(x$global.lm)$coefficients[,"Estimate"],
summary(x$global.lm)$coefficients[,"Std. Error"],
df_glm-1, n.sample-df_glm, AIC(x$global.lm),
AIC(x$global.lm)+(2*df_glm^2+2*df_glm)/(n.sample-df_glm-1),
deviance(x$global.lm), summary(x$global.lm)$adj.r.squared)
gwr_coeffs<-as(x$sdf, "data.frame")[, (1 + (1:(df_glm-1))), drop = FALSE]
if(any(is.na(gwr_coeffs)))
warning("NAs dropped in GWR local coefficients!")
if(is.null(gwr2$diagnostic.metrics))
gwr_param<-c(apply(gwr_coeffs, 2, mean, na.rm=T),
apply(gwr_coeffs, 2, sd, na.rm=T),
NA, NA, NA, NA, NA, NA)
if(!is.null(gwr2$diagnostic.metrics))
gwr_param<-c(apply(gwr_coeffs, 2, mean, na.rm=T),
apply(gwr_coeffs, 2, sd, na.rm=T),
x$diagnostic.metrics$EDF, n.sample-x$diagnostic.metrics$EDF,
x$diagnostic.metrics$AIC, x$diagnostic.metrics$AICc,
x$diagnostic.metrics$RSS,
1-x$diagnostic.metrics$RSS/x$diagnostic.metrics$TSS)
printDF<-rbind(glob_param, gwr_param)
colnames(printDF)<-c(coef_names, paste0("sd_", coef_names), "Effective DF",
"Effective number of parameters", "AIC", "AICc",
"RSS", "(Quasi) R2")
coef_names<-c("Intercept", all.vars(formula(x$call))[-1]
}
as(x$sdf, "data.frame")[, (1 + (1:(df_glm-1))), drop = FALSE]
coef_names<-c("Intercept", all.vars(formula(x$call))[-1])
printDF<-rbind(glob_param, gwr_param)
colnames(printDF)<-c(coef_names, paste0("sd_", coef_names), "Effective DF",
"Effective number of parameters", "AIC", "AICc",
"RSS", "(Quasi) R2")
rownames(printDF)<-c("Global model", "GWR")
printDF
colnames(printDF)<-c(coef_names, paste0("sd_", coef_names),
"Effective number of parameters",
"Effective DF", "AIC", "AICc",
"RSS", "(Quasi) R2")
printCoefmat(printDF)
?printCoefmat
glob_param<-c(summary(x$global.lm)$coefficients[,"Estimate"],
summary(x$global.lm)$coefficients[,"Std. Error"],
as.integer(df_glm-1), as.integer(n.sample-df_glm), AIC(x$global.lm),
AIC(x$global.lm)+(2*df_glm^2+2*df_glm)/(n.sample-df_glm-1),
deviance(x$global.lm), summary(x$global.lm)$adj.r.squared)
printDF<-rbind(glob_param, gwr_param)
colnames(printDF)<-c(coef_names, paste0("sd_", coef_names),
"Effective number of parameters",
"Effective DF", "AIC", "AICc",
"RSS", "(Quasi) R2")
rownames(printDF)<-c("Global model", "GWR")
?printCoefmat
printCoefmat(printDF)
print(printDF)
?print.coefmat
devtools::document("C:/Users/vincent/Documents/pargwr")
devtools::install_github("vpellissier/pargwr")
devtools::install_github("vpellissier/pargwr")
library(pargwr)
gwr2<-gwr_par(bio~dtm_sc+AspectSC, data=bio, bandwidth=796)
gwr2
print(gwr2)
getAnywhere(print.pargwr)
fp<-dp<-coordinates(meuse)
library(spgwr)
fp<-dp<-coordinates(meuse)
?gwr
data(meuse)
coordinates(meuse) <- c("x", "y")
q=30/155
n1 <- nrow(dp)
n2 <- nrow(fp)
fp<-dp<-coordinates(meuse)
n1 <- nrow(dp)
n2 <- nrow(fp)
storage.mode(dp) <- "double"
storage.mode(fp) <- "double"
dists <- numeric(n1)
bw <- numeric(n2)
n.ideal <- n1 * quant
quant<-30/155
n.ideal <- n1 * quant
n.lower <- floor(n.ideal)
n.higher <- n.lower + 1
q1 <- n.lower/n1
q2 <- n.higher/n1
res1 <- .C("gw_adapt", dp[, 1], dp[, 2], fp[, 1], fp[,
2], as.integer(n1), as.integer(n2), as.double(bw),
as.double(q1), dists, as.integer(longlat), PACKAGE = "spgwr")[[7]]
longlat=F
res1 <- .C("gw_adapt", dp[, 1], dp[, 2], fp[, 1], fp[,
2], as.integer(n1), as.integer(n2), as.double(bw),
as.double(q1), dists, as.integer(longlat), PACKAGE = "spgwr")[[7]]
res2 <- .C("gw_adapt", dp[, 1], dp[, 2], fp[, 1], fp[,
2], as.integer(n1), as.integer(n2), as.double(bw),
as.double(q2), dists, as.integer(longlat), PACKAGE = "spgwr")[[7]]
res <- (n.ideal - n.lower) * res2 + (n.higher - n.ideal) *
res1
dframe<-meuse@data
coords<-coordinates(meuse)
kernel="adaptative"
Obs <- nrow(dframe)
DistanceTable <- dist(coords)
Dij <- as.matrix(DistanceTable)
b.max <- Obs
b.min <- 30
b <- b.min:b.max
Ne<-30
m<-1
DNeighbour <- dmatrix[, m]
DataSet <- data.frame(dframe, DNeighbour = DNeighbour)
DataSetSorted <- DataSet[order(DataSet$DNeighbour), ]
dmatrix<-Dij
DNeighbour <- dmatrix[, m]
DataSet <- data.frame(dframe, DNeighbour = DNeighbour)
DataSetSorted <- DataSet[order(DataSet$DNeighbour), ]
SubSet <- DataSetSorted[1:Ne, ]
Kernel_H <- max(SubSet$DNeighbour)
Ne<-31
DNeighbour <- dmatrix[, m]
DataSet <- data.frame(dframe, DNeighbour = DNeighbour)
DataSetSorted <- DataSet[order(DataSet$DNeighbour), ]
SubSet <- DataSetSorted[1:Ne, ]
Kernel_H <- max(SubSet$DNeighbour)
head(res)
m<-2
DNeighbour <- dmatrix[, m]
DataSet <- data.frame(dframe, DNeighbour = DNeighbour)
DataSetSorted <- DataSet[order(DataSet$DNeighbour), ]
SubSet <- DataSetSorted[1:Ne, ]
Kernel_H <- max(SubSet$DNeighbour)
m<-3
DNeighbour <- dmatrix[, m]
DataSet <- data.frame(dframe, DNeighbour = DNeighbour)
DataSetSorted <- DataSet[order(DataSet$DNeighbour), ]
SubSet <- DataSetSorted[1:Ne, ]
Kernel_H <- max(SubSet$DNeighbour)
m<-6
DNeighbour <- dmatrix[, m]
DataSet <- data.frame(dframe, DNeighbour = DNeighbour)
DataSetSorted <- DataSet[order(DataSet$DNeighbour), ]
SubSet <- DataSetSorted[1:Ne, ]
Kernel_H <- max(SubSet$DNeighbour)
?gwr.sel
adaptative=F
!adaptative
?optimize
as.integer(15.8)
floor(15.8)
library(pargwr)
data(bio)
head(bio)
coordinates(bio)->coord
y<-bio$bio
x<-bio[,"dtm_sc", "AspectSC"]
x<-bio[,c("dtm_sc", "AspectSC")]
longlat=F
kernel="gaussian"
coords
x
head(meuse)
y<-meuse$cadmium
x<-meuse[,c("copper", "lead")]
kernel="gaussian"
bandwidth=30
weights=rep(1, 155)
xx <- x[i, ]
i<-1
xx <- x[i, ]
dxs <- spDistsN1(coords, coords[i, ], longlat = longlat)
order(dxs)
sort(dxs)
sort(dxs)[2:31]
max(sort(dxs)[2:31])
max(sort(dxs)[1:30])
devtools::documents("C:/Users/vincent/Documents/pargwr/R")
devtools::document("C:/Users/vincent/Documents/pargwr/R")
devtools::install_github("vpellissier/pargwr")
devtools::install_github("vpellissier/pargwr", ref="adapt_bw")
?gwr.sel
data(columbus, package="spData")
plot(columbus)
?gwr
head(meuse)
gwr.sel(cadmium ~ elev + dist + landuse, adapt=T)
data(meuse)
coordinates(meuse) <- c("x", "y")
gwr.sel(cadmium ~ elev + dist + landuse, adapt=T, data=meuse)
warnings()
gwr.sel(cadmium ~ elev + dist + landuse, adapt=T, data=meuse)
gwr.sel(cadmium ~ elev + dist + landuse, adapt=T, data=meuse, longlat=T)
gwr.sel(cadmium ~ elev + dist, adapt=T, data=meuse, longlat=T)
gwr_sel_par(cadmium ~ elev + dist, adaptative=T, data=meuse, longlat=T)
library(pargwr)
gwr_sel_par(cadmium ~ elev + dist, adaptative=T, data=meuse, longlat=T)
pargwr::cv.compz
pargwr:::cv.compz
devtools::document("C:/Users/vincent/Documents/pargwr/R")
devtools::install_github("vpellissier/pargwr", ref="adapt_bw")
library(pagwr)
library(pargwr)
gwr_sel_par(cadmium ~ elev + dist, adaptative=T, data=meuse, longlat=T)
gwr.sel(cadmium ~ elev + dist, adapt=T, data=meuse, longlat=T)
gwr_sel_par(cadmium ~ elev + dist, adaptative=T, data=meuse, longlat=T)
155*0.9742057
0.381966*155
gwr_sel_par(cadmium ~ elev + dist, adaptative=T, data=meuse, longlat=T, interval_dist = 0.5)
gwr_sel_par(cadmium ~ elev + dist, adaptative=T, data=meuse, longlat=T, interval_dist = 0.1)
gwr_sel_par(cadmium ~ elev + dist, adaptative=T, data=meuse, longlat=T, interval_dist = 0.000001)
gwr_sel_par(cadmium ~ elev + dist, adaptative=T, data=meuse, longlat=T, interval_dist = 0.00000000000000000000000000001)
gwr.sel
.Machine$double.eps^0.25
.Machine$double.eps^0.25*3
.Machine$double.eps^0.25/3
(.Machine$double.eps^0.25)/3
.Machine$double.eps^0.20
.Machine$double.eps^0.10
.Machine$double.eps^0.35
.Machine$double.eps^0.30
.Machine$double.eps^0.27
.Machine$double.eps^0.27-(.Machine$double.eps^0.25)/3
.Machine$double.eps^0.28-(.Machine$double.eps^0.25)/3
.Machine$double.eps^0.30-(.Machine$double.eps^0.25)/3
.Machine$double.eps^0.29-(.Machine$double.eps^0.25)/3
.Machine$double.eps^0.285-(.Machine$double.eps^0.25)/3
.Machine$double.eps^0.283-(.Machine$double.eps^0.25)/3
devtools::document("C:/Users/vincent/Documents/pargwr/R")
devtools::install_github("vpellissier/pargwr", ref="adapt_bw")
library(pargwr)
gwr_sel_par(cadmium ~ elev + dist, adaptative=T, data=meuse, longlat=T)
gwr.sel(cadmium ~ elev + dist, adapt=T, data=meuse, longlat=T)
gwr_sel_par(cadmium ~ elev + dist, adaptative=T, data=meuse, longlat=T)
0.9742057*155
0.9742057*155
0.9741564*155
150.9942-151.0019
gwr_sel_par(cadmium ~ elev + dist, adaptative=T, data=meuse, longlat=T, interval_dist = 0.0077/3)
gwr_sel_par(cadmium ~ elev + dist, adaptative=T, data=meuse, longlat=T, interval_dist = 0.1)
gwr.sel(cadmium ~ elev + dist, adapt=T, data=meuse, longlat=T, tol=3e-9)
154.8114/155
gwr_sel_par(cadmium ~ elev + dist, adaptative=T, data=meuse, longlat=T, interval_dist = 1/3)
0.9741935*155
gwr_sel_par(cadmium ~ elev + dist, adaptative=T, dist_max=152, data=meuse, longlat=T)
?gwr_sel_par
?gwr_sel_par
gwr_sel_par(cadmium ~ elev + dist, adaptative=T, max_dist=152, data=meuse, longlat=T)
gwr_sel_par(cadmium ~ elev + dist, adaptative=T, max_dist=155, data=meuse, longlat=T)
?lctools
??lctools
?lctools::gwr.bw
?gwr.sel
gwr_sel_par(cadmium ~ elev + dist, adaptative=T, max_dist=152, data=meuse, longlat=T, kernel="bisquare")
gwr_sel_par(cadmium ~ elev + dist, adaptative=T, data=meuse, longlat=T, kernel="bisquare")
lctools::gwr.bw(cadmium ~ elev + dist, dframe=meuse@data,
coords=coordinates(meuse), kernel="adaptative")
lctools::gwr.bw(cadmium ~ elev + dist, dframe=meuse@data, algorithm="heuristic",
coords=coordinates(meuse), kernel="adaptative")
library(GWmodel)
GWmodel::bw.gwr(cadmium ~ elev + dist, data=meuse, approach="CV",kernel="bisquare",
adaptive=TRUE, p=2, theta=0, longlat=F,dMat)
GWmodel::bw.gwr(cadmium ~ elev + dist, data=meuse, approach="CV",kernel="bisquare",
adaptive=TRUE, p=2, theta=0, longlat=F)
gwr_sel_par(cadmium ~ elev + dist, adaptative=T, data=meuse, longlat=T, kernel="bisquare")
gwr_sel_par(cadmium ~ elev + dist, adaptative=T, data=meuse, longlat=F, kernel="bisquare")
GWmodel::bw.gwr(cadmium ~ elev + dist, data=meuse, approach="CV",kernel="bisquare",
adaptive=TRUE, p=2, theta=0, longlat=F)
gwr.sel(cadmium ~ elev + dist, adapt=T, data=meuse, longlat=F, tol=3e-9, gW)
gwr.sel(cadmium ~ elev + dist, adapt=T, data=meuse, longlat=F, tol=3e-9)
0.0176711*155
gwr.sel(cadmium ~ elev + dist, adapt=T, data=meuse, longlat=F)
20/155
?gwr.sel
gwr.sel(cadmium ~ elev + dist, adapt=T, data=meuse, longlat=F, gweight = gwr.bisquare)
0.08042811*155
gwr_sel_par(cadmium ~ elev + dist, adaptative=T, data=meuse, longlat=F, kernel="bisquare")
gwr_sel_par(cadmium ~ elev + dist, adaptative=T, data=meuse, longlat=F, kernel="bisquare",
interval_dist = (.Machine$double.eps^0.25)/3)
lctools::gwr.bw(cadmium ~ elev + dist, dframe=meuse@data, algorithm="heuristic",
coords=coordinates(meuse), kernel="adaptative")
lctools::gwr.bw
?lctools::gwr.bw
lctools::gwr.bw(cadmium ~ elev + dist, dframe=meuse@data, algorithm="optim",
coords=coordinates(meuse), kernel="adaptative")
?optimize
lctools::gwr.bw(cadmium ~ elev + dist, dframe=meuse@data, algorithm="optim",
coords=coordinates(meuse), kernel="adaptative", optim.method = "Brent")
lctools::gwr.bw(cadmium ~ elev + dist, dframe=meuse@data, algorithm="optim",
coords=coordinates(meuse), kernel="adaptative", optim.method = "Brent",
xmin=1, xmax=155)
lctools::gwr.bw(cadmium ~ elev + dist, dframe=meuse@data, algorithm="optim",
coords=coordinates(meuse), kernel="adaptative", optim.method = "Brent",
b.min=1, b.max=155)
gwr.sel(cadmium ~ elev + dist, adapt=F, data=meuse, longlat=F, gweight = gwr.bisquare)
gwr_sel_par(cadmium ~ elev + dist, adaptative=F, data=meuse, longlat=F, kernel="bisquare",
interval_dist = (.Machine$double.eps^0.25)/3)
GWmodel::bw.gwr(cadmium ~ elev + dist, data=meuse, approach="CV",kernel="bisquare",
adaptive=F, p=2, theta=0, longlat=F)
lctools::gwr.bw(cadmium ~ elev + dist, dframe=meuse@data, algorithm="optim",
coords=coordinates(meuse), kernel="fixed", optim.method = "Brent",
b.min=300, b.max=3000)
lctools::gwr.bw(cadmium ~ elev + dist, dframe=meuse@data, algorithm="exhaustive",
coords=coordinates(meuse), kernel="fixed", optim.method = "Brent",
b.min=300, b.max=3000, step=1)
lctools::gwr.bw(cadmium ~ elev + dist, dframe=meuse@data, algorithm="exhaustive",
coords=coordinates(meuse), kernel="fixed", optim.method = "Brent",
b.min=384.9563, b.max=3000, step=1)
!ncores
exists(ncores)
?exists
exists("ncores")
exists("coords")
gwr.cv.f.par(bandwidth=384.9563, y=meuse$cadmium, x=meuse[,c("elev", "dist")], coords=coordinates(meuse),
adaptative=F, longlat=F, kernel="bisquare", ncores=NULL)
pqrgwr:::gwr.cv.f.par(bandwidth=384.9563, y=meuse$cadmium, x=meuse[,c("elev", "dist")], coords=coordinates(meuse),
adaptative=F, longlat=F, kernel="bisquare", ncores=NULL)
pargwr:::gwr.cv.f.par(bandwidth=384.9563, y=meuse$cadmium, x=meuse[,c("elev", "dist")], coords=coordinates(meuse),
adaptative=F, longlat=F, kernel="bisquare", ncores=NULL)
pargwr:::gwr.cv.f.par(bandwidth=384.9563, y=meuse$cadmium, x=meuse[,c("elev", "dist")], coords=coordinates(meuse),
adaptative=F, longlat=F, kernel="bisquare", ncores=NULL, weights=rep(1, 155))
pargwr:::gwr.cv.f.par(bandwidth=2000, y=meuse$cadmium, x=meuse[,c("elev", "dist")], coords=coordinates(meuse),
adaptative=F, longlat=F, kernel="bisquare", ncores=NULL, weights=rep(1, 155))
y=meuse$cadmium
y
meuse[,c("elev", "dist")]
pargwr:::gwr.cv.f.par(bandwidth=2000, y=meuse$cadmium, x=meuse@data[,c("elev", "dist")], coords=coordinates(meuse),
adaptative=F, longlat=F, kernel="bisquare", ncores=NULL, weights=rep(1, 155))
pargwr:::gwr.cv.f.par(bandwidth=2000, y=meuse@data$cadmium, x=meuse@data[,c("elev", "dist")], coords=coordinates(meuse),
adaptative=F, longlat=F, kernel="bisquare", ncores=NULL, weights=rep(1, 155))
bandwidth=2000
y=meuse@data$cadmium
x=meuse@data[,c("elev", "dist")]
coords=coordinates(meuse)
adaptative=F
longlat=F
kernel="bisquare"
ncores=NULL
weights=rep(1, 155))
weights=rep(1, 155)
verbose = TRUE
show.error.messages = TRUE
RMSE = FALSE
longlat = FALSE
n <- NROW(x)
cv <- numeric(n)
options(show.error.messages = show.error.messages)
(!is.null(ncores) && ncores>1)
sapply(seq(n), function(m) cv.compz(m, x=x, y=y, coords=coords,
adaptative=adaptative, longlat=longlat,
kernel=kernel, bandwidth=bandwidth,
weights=weights))
i<-1
xx <- x[i, ]
dxs <- spDistsN1(coords, coords[i, ], longlat = longlat)
if (!is.finite(dxs[i]))
dxs[i] <- .Machine$double.xmax/2
if(adaptative)
bandwidth <- max(sort(dxs)[2:bandwidth+1])
if(kernel=="bisquare")
w.i<-weight.bisquare(dxs, bandwidth)
w.i[i]<-0
w.i<-w.i*weights
lm.i <- try(lm.wfit(y = y, x = x, w = w.i))
y
x
w
dxs
w.i<-weight.bisquare(dxs, bandwidth)
try(lm.wfit(y = y, x = x, w = w.i))
w
w.i
y
try(lm.wfit(y = y, x = x, w = w.i))
lm.wfit(y = y, x = x, w = w.i)
rbind(weights, x)
cbind(weights, x)
cbind(weights, x)->x
try(lm.wfit(y = y, x = x, w = w.i))
x
x<-x[,2:3]
lm(y~x)
lm(y~x[,1]+x[,2])
lm(y~x[,1]+x[,2], weights=w.i)
w.i
lm.wfit(y = y, x = x, w = w.i)
lm.wfit
lm.wfit(y = y, x = x, w = w.i)
gwr_sel_par(cadmium ~ elev + dist, adaptative=F, data=meuse, longlat=F, kernel="bisquare",
interval_dist = (.Machine$double.eps^0.25)/3)
pargwr:::gwr.cv.f.par(bandwidth=2262.928, y=meuse@data$cadmium, x=meuse@data[,c("elev", "dist")], coords=coordinates(meuse),
adaptative=F, longlat=F, kernel="bisquare", ncores=NULL, weights=rep(1, 155))
pargwr:::gwr.cv.f.par(bandwidth=2262.928, y=meuse@data$cadmium, x=cbinb(rep(1,155), meuse@data[,c("elev", "dist")]), coords=coordinates(meuse),
adaptative=F, longlat=F, kernel="bisquare", ncores=NULL, weights=rep(1, 155))
pargwr:::gwr.cv.f.par(bandwidth=2262.928, y=meuse@data$cadmium, x=cbind(rep(1,155), meuse@data[,c("elev", "dist")]), coords=coordinates(meuse),
adaptative=F, longlat=F, kernel="bisquare", ncores=NULL, weights=rep(1, 155))
?lm.wfit
2262.928->bandwidth
n <- NROW(x)
cv <- numeric(n)
i
xx <- x[i, ]
dxs <- spDistsN1(coords, coords[i, ], longlat = longlat)
(!is.finite(dxs[i]))
w.i<-weight.bisquare(dxs, bandwidth)
w.i
meuse[c(1,64),]
dws[♦1,64]
dws[1,64]
dxs[1,64]
dxs[c(1,64)]
w.i[i]<-0
w.i<-w.i*weights
try(lm.wfit(y = y, x = x, w = w.i))
x
y
try(lm.wfit(y = y, x = as.matrix(x), w = w.i))
pargwr:::gwr.cv.f.par(bandwidth=2262.928, y=meuse@data$cadmium,
x=as.matrix(cbind(rep(1,155), meuse@data[,c("elev", "dist")])),
coords=coordinates(meuse),
adaptative=F, longlat=F, kernel="bisquare", ncores=NULL, weights=rep(1, 155))
GWmodel::bw.gwr(cadmium ~ elev + dist, data=meuse, approach="CV",kernel="bisquare",
adaptive=F, p=2, theta=0, longlat=F)
pargwr:::gwr.cv.f.par(bandwidth=384.9563, y=meuse@data$cadmium,
x=as.matrix(cbind(rep(1,155), meuse@data[,c("elev", "dist")])),
coords=coordinates(meuse),
adaptative=F, longlat=F, kernel="bisquare", ncores=NULL, weights=rep(1, 155))
?gwr
data(columbus, package="spData")
gwr.sel(CRIME ~ INC + HOVAL, adapt=T, data=columbus, longlat=F, gweight = gwr.bisquare)
columbus
coordinates(columbus) <- c("X", "Y")
columbus
gwr.sel(CRIME ~ INC + HOVAL, adapt=T, data=columbus, longlat=F, gweight = gwr.bisquare)
gwr_sel_par(CRIME ~ INC + HOVAL, daptative=T, data=columbus, longlat=F, kernel="bisquare",
interval_dist = (.Machine$double.eps^0.25)/3)
gwr_sel_par(CRIME ~ INC + HOVAL, adaptative=T, data=columbus, longlat=F, kernel="bisquare",
interval_dist = (.Machine$double.eps^0.25)/3)
dim(columbus)
0.653*49
lctools::gwr.bw(CRIME ~ INC + HOVAL, dframe=columbus@data, algorithm="optim",
coords=coordinates(columbus), kernel="adat", optim.method = "Brent",
b.min=1, b.max=49)
columbus@data
lctools::gwr.bw(CRIME ~ INC + HOVAL, dframe=columbus@data, algorithm="optim",
coords=coordinates(columbus), kernel="adat", optim.method = "Brent",
b.min=1, b.max=49)
columbus@data$CRIME
lctools::gwr.bw(CRIME ~ INC + HOVAL, dframe=columbus@data, algorithm="optim",
coords=coordinates(columbus), kernel="adapt", optim.method = "Brent",
b.min=1, b.max=49)
lm(CRIME ~ INC + HOVAL, dframe=columbus@data)
lm(CRIME ~ INC + HOVAL, data=columbus@data)
?lctools::gwr.bw
lctools::gwr.bw(cadmium ~ elev + dist, dframe=meuse@data, algorithm="exhaustive",
coords=coordinates(meuse), kernel="fixed", optim.method = "Brent",
b.min=384.9563, b.max=3000, step=1)
lctools::gwr.bw(CRIME ~ INC + HOVAL, dframe=data.frame(columbus@data), algorithm="exhaustive",
coords=coordinates(columbus), kernel="fixed", optim.method = "Brent",
b.min=384.9563, b.max=3000, step=1)
lctools::gwr.bw(CRIME ~ INC + HOVAL, dframe=data.frame(columbus@data), algorithm="exhaustive",
coords=coordinates(columbus), kernel="fixed", optim.method = "Brent",
b.min=1, b.max=49, step=1)
lctools::gwr.bw(CRIME ~ INC + HOVAL, dframe=data.frame(columbus@data), algorithm="exhaustive",
coords=coordinates(columbus), kernel="adaptive", optim.method = "Brent",
b.min=1, b.max=49, step=1)
lctools::gwr.bw(CRIME ~ INC + HOVAL, dframe=data.frame(columbus@data), algorithm="optim",
coords=coordinates(columbus), kernel="adaptive", optim.method = "Brent",
b.min=1, b.max=49, step=1)
gwr_sel_par(CRIME ~ INC + HOVAL, adaptative=T, data=columbus, longlat=F, kernel="bisquare",
interval_dist = (.Machine$double.eps^0.25)/3)
